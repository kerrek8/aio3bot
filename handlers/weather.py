import json
import os
from datetime import datetime

import aiohttp
from aiogram import F
from aiogram.dispatcher.router import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from dotenv import load_dotenv

from keyboards.inline_keyboards.builder import inline_builder
from keyboards.reply_keyboards.builder import reply_builder
from misk.weather_misks import WeatherEndpointCurrent, WeatherEndpointDays, city_coords

load_dotenv()

router = Router()


@router.callback_query(F.data == 'start_weather')
async def weather(c: CallbackQuery):
    kb = await inline_builder(text=['–°—Ç—Ä–µ–∂–µ–≤–æ–π', '–¢—é–º–µ–Ω—å', '–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–û—Ç–º–µ–Ω–∞'],
                              callback_data=['city_strej', 'city_tymen', 'curent_location', 'weather_cansel'],
                              sizes=[2, 1, 1])
    await c.answer()
    await c.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", reply_markup=kb)


@router.callback_query(F.data == 'weather_cansel')
async def light_cansel(c: CallbackQuery):
    await c.answer()
    await c.message.edit_text('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=None)


@router.callback_query(F.data == 'curent_location')
async def curent_weather(c: CallbackQuery):
    await c.answer()
    kb = await reply_builder(text=['–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'], send_loc=True)
    await c.message.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É—Ä—è–¥–æ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –≤–∞—â–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                           reply_markup=kb)


@router.message(F.location)
async def weather_by_location(m: Message):
    latitude = m.location.latitude
    longitude = m.location.longitude
    t = ['–°–µ–π—á–∞—Å', '–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞', '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞']
    cd = ['wtime_' + '–°–µ–π—á–∞—Å_' + f'{latitude}_{longitude}', 'wtime_' + '8_' +
          f'{latitude}_{longitude}',
          'wtime_' + '16_' + f'{latitude}_{longitude}', 'wtime_' + '35_' +
          f'{latitude}_{longitude}']
    t.append('–ù–∞  5 –¥–Ω–µ–π')
    cd.append('wtime_40_' + f'{latitude}_{longitude}')
    t.append('–û—Ç–º–µ–Ω–∞')
    cd.append('weather_cansel')
    kb = await inline_builder(text=t, callback_data=cd, sizes=[1, 3, 1, 1])
    await m.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –æ–ø—Ü–∏—é', reply_markup=kb)


@router.callback_query(F.data.startswith('city_'))
async def get_option(c: CallbackQuery):
    data = c.data.split('_')[1]
    latitude = city_coords[data]['latitude']
    longitude = city_coords[data]['longitude']
    await c.answer()
    t = ['–°–µ–π—á–∞—Å', '–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞', '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞']
    cd = ['wtime_' + '–°–µ–π—á–∞—Å_' + f'{latitude}_{longitude}', 'wtime_' + '8_' +
          f'{latitude}_{longitude}',
          'wtime_' + '16_' + f'{latitude}_{longitude}', 'wtime_' + '35_' +
          f'{latitude}_{longitude}']
    t.append('–ù–∞  5 –¥–Ω–µ–π')
    cd.append('wtime_40_' + f'{latitude}_{longitude}')
    t.append('–û—Ç–º–µ–Ω–∞')
    cd.append('weather_cansel')
    kb = await inline_builder(text=t, callback_data=cd, sizes=[1, 3, 1, 1])
    await c.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –æ–ø—Ü–∏—é', reply_markup=kb)


@router.callback_query(F.data.startswith('wtime_'))
async def weather(c: CallbackQuery):
    time = c.data.split('_')[1]
    latitude = c.data.split('_')[2]
    longitude = c.data.split('_')[3]
    if time == '–°–µ–π—á–∞—Å':
        await now(c, latitude, longitude)
    elif time == '8':
        await today(c, latitude, longitude)
    elif time == '16':
        await tomorrow(c, latitude, longitude)
    elif time == '35':
        await aftertomorrow(c, latitude, longitude)
    elif time == '40':
        await fivedays(c, latitude, longitude)


async def now(c: CallbackQuery, latitude, longitude):
    data = await get_weather_now(latitude, longitude)
    if data['cod'] != 200:
        await c.answer()
        await c.message.edit_text("—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=None)
        print(data)
        return
    city = data['name']
    temp = round(data['main']['temp'] + 1)
    feels_like = round(data['main']['feels_like'] + 1)
    speed = data['wind']['speed']
    weather = data['weather'][0]['description']
    cloudnes = data['clouds']['all']
    s = f"üå§–ü–û–ì–û–î–ê –í –ì–û–†–û–î–ï {city} –°–ï–ô–ß–ê–°üå§\n" \
        f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C</b>\n" \
        f"–û—â—É—â–∞–µ—Ç—Å—è: {feels_like}¬∞C\n" \
        f"–ü–æ–≥–æ–¥–∞: {weather}\n" \
        f"–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {cloudnes}%\n" \
        f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {speed}–º/—Å\n"
    await c.answer()
    await c.message.edit_text(s, parse_mode='html', reply_markup=None)


async def today(c: CallbackQuery, lat, lon):
    cnt = 8
    data = await get_weather_days(lat, lon, cnt)
    if data['cod'] != '200':
        await c.answer()
        await c.message.edit_text("—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=None)
        return
    d = data['list']
    city = data['city']['name']
    delta = int(int(data['city']['timezone']) / 3600)
    s = f'üå§–ü–û–ì–û–î–ê –í –ì–û–†–û–î–ï {city} –ù–ê –°–ï–ì–û–î–ù–Ø (–í—Ä–µ–º—è UTC+{delta})üå§\n' \
        f'üå§{d[0]["dt_txt"][8:10] + "-" + d[0]["dt_txt"][5:7] + "-" + d[0]["dt_txt"][0:4]}üå§\n'
    listtoappend = []
    for i in range(len(d)):
        timebrake = int(d[i]['dt_txt'][11:13])
        timebrake += delta
        if timebrake > 24:
            break
        h = [str(timebrake) + ':00', d[i]["main"]['temp'], d[i]['main']['feels_like'],
             d[i]['weather'][0]['description'], d[i]['clouds']['all']]
        listtoappend.append(h)
    for i in listtoappend:
        s = (s + f'\n–í {i[0]} \n' + f'<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(i[1] + 1)}\n</b>' + f'–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {round(i[2] + 1)}\n' +
             f'–ü–æ–≥–æ–¥–∞: {i[3]}\n' + f'–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {i[4]}%\n')
    await c.answer()
    await c.message.edit_text(s, parse_mode='html', reply_markup=None)


async def tomorrow(c: CallbackQuery, lat, lon):
    cnt = 16
    data = await get_weather_days(lat, lon, cnt)
    if data['cod'] != '200':
        await c.answer()
        await c.message.edit_text("—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=None)
        return
    d = data['list']
    city = data['city']['name']
    delta = int(int(data['city']['timezone']) / 3600)
    day = datetime.now().strftime('%d')
    while True:
        if int(d[0]['dt_txt'][8:10]) == int(day):
            del d[0]
        else:
            break
    s = f'üå§–ü–û–ì–û–î–ê –í –ì–û–†–û–î–ï {city} –ù–ê –ó–ê–í–¢–†–ê (–í—Ä–µ–º—è UTC+{delta})üå§\n' \
        f'üå§{d[0]["dt_txt"][8:10] + "-" + d[0]["dt_txt"][5:7] + "-" + d[0]["dt_txt"][0:4]}üå§\n'
    listtoappend = []
    for i in range(len(d)):
        timebrake = int(d[i]['dt_txt'][11:13])
        timebrake += delta
        if timebrake > 24:
            break
        h = [str(timebrake) + ':00', d[i]["main"]['temp'], d[i]['main']['feels_like'],
             d[i]['weather'][0]['description'], d[i]['clouds']['all']]
        listtoappend.append(h)
    for i in listtoappend:
        s = (s + f'\n–í {i[0]} \n' + f'<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(i[1] + 1)}\n</b>' + f'–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {round(i[2] + 1)}\n' +
             f'–ü–æ–≥–æ–¥–∞: {i[3]}\n' + f'–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {i[4]}%\n')
    await c.answer()
    await c.message.edit_text(s, parse_mode='html', reply_markup=None)


async def aftertomorrow(c: CallbackQuery, lat, lon):
    cnt = 35
    data = await get_weather_days(lat, lon, cnt)
    if data['cod'] != '200':
        await c.answer()
        await c.message.edit_text("—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=None)
        return
    d = data['list']
    city = data['city']['name']
    delta = int(int(data['city']['timezone']) / 3600)
    day = datetime.now().strftime('%d')
    while True:
        if int(d[0]['dt_txt'][8:10]) == int(day) or int(d[0]['dt_txt'][8:10]) == int(day) + 1:
            del d[0]
        else:
            break
    s = f'üå§–ü–û–ì–û–î–ê –í –ì–û–†–û–î–ï {city} –ù–ê –ü–û–°–õ–ï–ó–ê–í–¢–†–ê (–í—Ä–µ–º—è UTC+{delta})üå§\n' \
        f'üå§{d[0]["dt_txt"][8:10] + "-" + d[0]["dt_txt"][5:7] + "-" + d[0]["dt_txt"][0:4]}üå§\n'
    listtoappend = []
    for i in range(len(d)):
        timebrake = int(d[i]['dt_txt'][11:13])
        timebrake += delta
        if timebrake > 24:
            break
        h = [str(timebrake) + ':00', d[i]["main"]['temp'], d[i]['main']['feels_like'],
             d[i]['weather'][0]['description'], d[i]['clouds']['all']]
        listtoappend.append(h)
    for i in listtoappend:
        s = (s + f'\n–í {i[0]} \n' + f'<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(i[1] + 1)}\n</b>' + f'–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {round(i[2] + 1)}\n' +
             f'–ü–æ–≥–æ–¥–∞: {i[3]}\n' + f'–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {i[4]}%\n')
    await c.answer()
    await c.message.edit_text(s, parse_mode='html', reply_markup=None)


async def fivedays(c: CallbackQuery, lat, lon):
    cnt = 40
    data = await get_weather_days(lat, lon, cnt)
    if data['cod'] != '200':
        await c.answer()
        await c.message.edit_text("—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=None)
        return
    d = data['list']
    city = data['city']['name']
    delta = int(int(data['city']['timezone']) / 3600)
    s = f'üå§–ü–û–ì–û–î–ê –í –ì–û–†–û–î–ï {city} –ù–ê 5 –î–ù–ï–ô (–í—Ä–µ–º—è UTC+{delta})üå§\n' \
        f'üå§{d[0]["dt_txt"][8:10] + "-" + d[0]["dt_txt"][5:7] + "-" + d[0]["dt_txt"][0:4]}üå§\n'
    listtoappend = []
    for i in range(len(d)):
        timebrake = int(d[i]['dt_txt'][11:13])
        timebrake += delta
        if timebrake > 24:
            continue
        date = f'{d[i]["dt_txt"][8:10]}-{d[i]["dt_txt"][5:7]}-{d[i]["dt_txt"][0:4]}'
        h = [date, str(timebrake) + ':00', d[i]["main"]['temp'], d[i]['main']['feels_like'],
             d[i]['weather'][0]['description'], d[i]['clouds']['all']]
        listtoappend.append(h)
    for i in listtoappend:
        if i[1] == '7:00' or i[1] == '5:00':
            s = (s + f'\nüå§{i[0]}üå§\n' + f'\n–í {i[1]} \n' + f'<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(i[2] + 1)}\n</b>' +
                 f'–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {round(i[3] + 1)}\n' + f'–ü–æ–≥–æ–¥–∞: {i[4]}\n' + f'–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {i[5]}%\n')
        else:
            s = (s + f'\n–í {i[1]} \n' + f'<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(i[2] + 1)}\n</b>' +
                 f'–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {round(i[3] + 1)}\n' + f'–ü–æ–≥–æ–¥–∞: {i[4]}\n' + f'–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {i[5]}%\n')
    await c.answer()
    await c.message.edit_text(s, parse_mode='html', reply_markup=None)


async def get_weather_days(latitude, longitude, cnt) -> dict:
    url = await WeatherEndpointDays()
    url = url.format(latitude, longitude, cnt, os.getenv("OWM_API"))

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            r = await response.text()
    data = json.loads(r)
    return data


async def get_weather_now(latitude, longitude) -> dict:
    url = await WeatherEndpointCurrent()
    url = url.format(latitude, longitude, os.getenv("OWM_API"))
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            r = await response.text()
    data = json.loads(r)
    return data
